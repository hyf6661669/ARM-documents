#!/usr/bin/env perl
# -----------------------------------------------------------------------------
#  The confidential and proprietary information contained in this file may
#  only be used by a person authorised under and to the extent permitted
#  by a subsisting licensing agreement from ARM Limited.
# 
#             (C) COPYRIGHT 2008-2009 ARM Limited.
#                 ALL RIGHTS RESERVED
# 
#  This entire notice must be reproduced on all copies of this file
#  and copies of this file may only be made by a person if such person is
#  permitted to do so under the terms of a subsisting license agreement
#  from ARM Limited.
# 
#       RCS Information
# 
#       RCS Filename : $RCSfile:$
# 
#       Revision     : $Revision:$
# 
# -----------------------------------------------------------------------------

$^W=1; # enable warnings (same as perl -w)

require 5.002;
BEGIN {
    push @INC,"../../tools";
    }
use VerilogCrf::Ctrm;
use strict;
use English;
use Getopt::Std;

my($debug)=$ENV{DEBUG_VERILOGCRF};

my($progname)=$0;

my($optstring) = 'i:o:t:V';
my($optsyntax) = '-i crf-file -o vrf-file [-t ctrm-file]';

die <<EOF unless (getopts($optstring) && ($Getopt::Std::opt_i && $Getopt::Std::opt_o && $#ARGV<0 || $Getopt::Std::opt_V));
Syntax: $0 $optsyntax

Options:
   -i crf-file   CRF file to read
   -o vrf-file   VRF file to write
   -t ctrm-file  CTRM file to read, if CTRM not embedded in CRF

Description:

Converts from CRF to VRF.

See the manual page for details
EOF

if ($Getopt::Std::opt_V) {
  print 'Crf2Vrf ', "\n";
  exit;
}

my($crffilename) = $Getopt::Std::opt_i;
my($vrffilename) = $Getopt::Std::opt_o;

my($happy_compiler) = $Getopt::Std::opt_t;
my($ctrmfilename) = $Getopt::Std::opt_t || $crffilename;

&infomessage("Reading CTRM from $ctrmfilename");
my($ctrm) = &readctrmfile($ctrmfilename);

open(VRF, ">$vrffilename") || die "Can't write $vrffilename";
open(CRF, "<$crffilename") || die "Can't read $crffilename";
my($crffilesize) = -s CRF;

&infomessage('Reading CRF header...');
# Look for first divider

while (<CRF>) {
  last if (/^[-|]+\n/);
}

# Read signal names

my(@sigcols);
for ($_=length($_); $_>=0; $_--) {
  $sigcols[$_] = '';
}

my($hdrline);

while (<CRF>) {
  last if (/^[-|]+\n/);
  $hdrline=$_;
  my(@chars) = split(//);
  my($i);
  for ($i=0; $i<$#chars; $i++) {
    $sigcols[$i].=$chars[$i];
  }
}

my(@signals);
my(@sigtype);
my(@signalbase);

foreach (@sigcols) {
  s/ +//g;
  if ($_ && !/\|/) {
    push(@signals, $_);
  }
}

# Do bus numbers bit
my($col);
my(@sigcollist);
chomp $hdrline;
for ($_=length($hdrline); $_>=0; $_--) {
  $sigcols[$_] = '';
}
$col=0;
for ($col = 0; $hdrline; $col++, $hdrline=substr($hdrline, 1)) {
  my($c) = substr($hdrline, 0, 1);
  if ($c =~ /[A-Za-z0-9_]/) {
    push(@sigcollist, $col);
  }
}

while (<CRF>) {
  last if (/^[-|]+\n/);
  my(@chars) = split(//);
  my($i);
  for ($i=0; $i<$#chars; $i++) {
    $sigcols[$i].=$chars[$i];
  }
}

for ($_=0; $_<=$#signals; $_++) {
  my($col) = $sigcollist[$_];
  my($upper) = $sigcols[$col] =~ /\d/ ? int($sigcols[$col]) : 0;
  my($lower) = 0;
  while ($sigcols[$col] =~ /\d/) {
    $lower = int($sigcols[$col]);
    $col++;
  }
  print STDERR "$signals[$_] ranges from $upper downto $lower\n" if ($debug);
  push(@signalbase, $upper);
}

# Output VRF header
foreach ($ctrm->makectrmfile) {
  print VRF "//CTRM: $_\n";
}

# Convert CRF
&infomessage('Converting CRF...');
my(%crfsignalindex);
&prepareindex;
my($lastprogressout) = 0;
my($lastprogresstime) = 0;
sub progressmessage {
  my($pos) = shift;
  my($pct) = int(100*$pos/$crffilesize);
  my($now) = time;
  
  if ($pct >= ($lastprogressout + 10) || ($now > ($lastprogresstime + 5))) {
    $lastprogressout = $pct;
    $lastprogresstime = $now;
    &infomessage("Progress: $pct\%");
  }
}
my($fileoffset) = tell CRF;
$crffilesize -= $fileoffset;
my($crfline);
while ($crfline = <CRF>) {
  next if ($crfline =~ /^#/);
  last if ($crfline =~ /^[-|]+\n/);
  last if ($crfline !~ /\S/);
  &progressmessage((tell CRF) - $fileoffset);
  #my(@columns) = split(/[ |]+/, $crfline);
  my($vrf)='';
  foreach (@{$ctrm->{Inputs}}) {
    my($crfvalue) = &findincrf_indexed($crfline, $_);
    $crfvalue =~ tr/LH.stu/01xzzx/;
    $vrf = $crfvalue . $vrf;
  }
  foreach (@{$ctrm->{Bidirectionals}}) {
    my($crfvalue) = &findincrf_indexed($crfline, $_);
    my($direction) = ($crfvalue =~ /[LHzx]/ ? '0' : '1');
    $crfvalue =~ tr/LH.stu/01xzzx/;
    $vrf = $direction . $crfvalue . $vrf;
  }
  foreach (@{$ctrm->{Outputs}}) {
    my($crfvalue) = &findincrf_indexed($crfline, $_);
    $crfvalue =~ tr/LH.stu/01xzzx/;
    $vrf = $crfvalue . $vrf;
  }
  print VRF "$vrf\n";
}

sub prepareindex {
  my($signame);
  foreach $signame (@{$ctrm->{Inputs}}, @{$ctrm->{Bidirectionals}}, @{$ctrm->{Outputs}}) {
    my($signal, $upper, $lower) = &namerangeof($signame);
    my($i);
    for ($i=0; $i<=$#signals; $i++) {
      if ($signals[$i] eq $signal) {
	my($column) = $sigcollist[$i];
	my($base) = $signalbase[$i];
	my($width) = ($upper ne '' && $lower ne '') ? $upper-$lower+1 : 1;
	$crfsignalindex{$signame} = [$column + $base - ($upper ne '' ? $upper : 0), $width];
      }
    }
  }
  foreach (sort keys %crfsignalindex) {
    print STDERR "prepareindex: $_: [$crfsignalindex{$_}->[0], $crfsignalindex{$_}->[1]]\n" if ($debug);
  }
}

sub findincrf_indexed {
  my($crfline, $signame) = @_;
  my($value) = $crfsignalindex{$signame};
  if ($value) {
    my($ofs, $len) = @$value;
    substr($crfline, $ofs, $len);
  }
  else {
    die "Unknown signal \"$signame\" requested";
  }
}

sub findincrf {
  my($crfline, $signame) = @_;
  my($i);
  my($signal, $upper, $lower) = &namerangeof($signame);
  for ($i=0; $i<=$#signals; $i++) {
    if ($signals[$i] eq $signal) {
      #print "findincrf($crfline, $signal) = $$crfline[$i]\n";
      return &extractrange($upper, $lower, $crfline, $signalbase[$i], $sigcollist[$i]);
    }
  }
  #print "findincrf($crfline, $signal) failed\n";
  'x' x ($upper-$lower+1);
}

sub extractrange {
  my($upper, $lower, $crfline, $crfvaluebase, $column) = @_;
  my($width) = ($upper ne '' && $lower ne '') ? $upper-$lower+1 : 1;
  substr($crfline, $column + $crfvaluebase - ($upper ne '' ? $upper : 0), $width);
}

sub infomessage {
  my($msg) = shift;
  print STDERR "$0: info: $msg\n";
}

&infomessage('Finished');
